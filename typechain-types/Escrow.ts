/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface EscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buyer"
      | "buyerDeposit"
      | "cancelPurchase"
      | "confirmDelivery"
      | "confirmPurchase"
      | "confirmShipping"
      | "getContractBalance"
      | "getEscrowStatus"
      | "itemValue"
      | "seller"
      | "sellerDeposit"
      | "state"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DeliveryCancelled"
      | "DepositMade"
      | "FundsDistributed"
      | "ItemDelivered"
      | "StateChanged"
  ): EventFragment;

  encodeFunctionData(functionFragment: "buyer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buyerDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelPurchase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "confirmDelivery",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "confirmPurchase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "confirmShipping",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEscrowStatus",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "itemValue", values?: undefined): string;
  encodeFunctionData(functionFragment: "seller", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sellerDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "state", values?: undefined): string;

  decodeFunctionResult(functionFragment: "buyer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyerDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelPurchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmDelivery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmPurchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmShipping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEscrowStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "itemValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "seller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sellerDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
}

export namespace DeliveryCancelledEvent {
  export type InputTuple = [initiator: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [initiator: string, timestamp: bigint];
  export interface OutputObject {
    initiator: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositMadeEvent {
  export type InputTuple = [
    from: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [from: string, amount: bigint, timestamp: bigint];
  export interface OutputObject {
    from: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsDistributedEvent {
  export type InputTuple = [
    to: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [to: string, amount: bigint, timestamp: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ItemDeliveredEvent {
  export type InputTuple = [timestamp: BigNumberish];
  export type OutputTuple = [timestamp: bigint];
  export interface OutputObject {
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StateChangedEvent {
  export type InputTuple = [
    previousState: BigNumberish,
    newState: BigNumberish
  ];
  export type OutputTuple = [previousState: bigint, newState: bigint];
  export interface OutputObject {
    previousState: bigint;
    newState: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Escrow extends BaseContract {
  connect(runner?: ContractRunner | null): Escrow;
  waitForDeployment(): Promise<this>;

  interface: EscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buyer: TypedContractMethod<[], [string], "view">;

  buyerDeposit: TypedContractMethod<[], [bigint], "view">;

  cancelPurchase: TypedContractMethod<[], [void], "nonpayable">;

  confirmDelivery: TypedContractMethod<[], [void], "nonpayable">;

  confirmPurchase: TypedContractMethod<[], [void], "payable">;

  confirmShipping: TypedContractMethod<[], [void], "nonpayable">;

  getContractBalance: TypedContractMethod<[], [bigint], "view">;

  getEscrowStatus: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        currentState: bigint;
        contractBalance: bigint;
        buyerDepositAmount: bigint;
        sellerDepositAmount: bigint;
      }
    ],
    "view"
  >;

  itemValue: TypedContractMethod<[], [bigint], "view">;

  seller: TypedContractMethod<[], [string], "view">;

  sellerDeposit: TypedContractMethod<[], [bigint], "view">;

  state: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buyer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "buyerDeposit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "cancelPurchase"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "confirmDelivery"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "confirmPurchase"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "confirmShipping"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getContractBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEscrowStatus"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        currentState: bigint;
        contractBalance: bigint;
        buyerDepositAmount: bigint;
        sellerDepositAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "itemValue"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "seller"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sellerDeposit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "state"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "DeliveryCancelled"
  ): TypedContractEvent<
    DeliveryCancelledEvent.InputTuple,
    DeliveryCancelledEvent.OutputTuple,
    DeliveryCancelledEvent.OutputObject
  >;
  getEvent(
    key: "DepositMade"
  ): TypedContractEvent<
    DepositMadeEvent.InputTuple,
    DepositMadeEvent.OutputTuple,
    DepositMadeEvent.OutputObject
  >;
  getEvent(
    key: "FundsDistributed"
  ): TypedContractEvent<
    FundsDistributedEvent.InputTuple,
    FundsDistributedEvent.OutputTuple,
    FundsDistributedEvent.OutputObject
  >;
  getEvent(
    key: "ItemDelivered"
  ): TypedContractEvent<
    ItemDeliveredEvent.InputTuple,
    ItemDeliveredEvent.OutputTuple,
    ItemDeliveredEvent.OutputObject
  >;
  getEvent(
    key: "StateChanged"
  ): TypedContractEvent<
    StateChangedEvent.InputTuple,
    StateChangedEvent.OutputTuple,
    StateChangedEvent.OutputObject
  >;

  filters: {
    "DeliveryCancelled(address,uint256)": TypedContractEvent<
      DeliveryCancelledEvent.InputTuple,
      DeliveryCancelledEvent.OutputTuple,
      DeliveryCancelledEvent.OutputObject
    >;
    DeliveryCancelled: TypedContractEvent<
      DeliveryCancelledEvent.InputTuple,
      DeliveryCancelledEvent.OutputTuple,
      DeliveryCancelledEvent.OutputObject
    >;

    "DepositMade(address,uint256,uint256)": TypedContractEvent<
      DepositMadeEvent.InputTuple,
      DepositMadeEvent.OutputTuple,
      DepositMadeEvent.OutputObject
    >;
    DepositMade: TypedContractEvent<
      DepositMadeEvent.InputTuple,
      DepositMadeEvent.OutputTuple,
      DepositMadeEvent.OutputObject
    >;

    "FundsDistributed(address,uint256,uint256)": TypedContractEvent<
      FundsDistributedEvent.InputTuple,
      FundsDistributedEvent.OutputTuple,
      FundsDistributedEvent.OutputObject
    >;
    FundsDistributed: TypedContractEvent<
      FundsDistributedEvent.InputTuple,
      FundsDistributedEvent.OutputTuple,
      FundsDistributedEvent.OutputObject
    >;

    "ItemDelivered(uint256)": TypedContractEvent<
      ItemDeliveredEvent.InputTuple,
      ItemDeliveredEvent.OutputTuple,
      ItemDeliveredEvent.OutputObject
    >;
    ItemDelivered: TypedContractEvent<
      ItemDeliveredEvent.InputTuple,
      ItemDeliveredEvent.OutputTuple,
      ItemDeliveredEvent.OutputObject
    >;

    "StateChanged(uint8,uint8)": TypedContractEvent<
      StateChangedEvent.InputTuple,
      StateChangedEvent.OutputTuple,
      StateChangedEvent.OutputObject
    >;
    StateChanged: TypedContractEvent<
      StateChangedEvent.InputTuple,
      StateChangedEvent.OutputTuple,
      StateChangedEvent.OutputObject
    >;
  };
}
